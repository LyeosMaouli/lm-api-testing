# scripts/setup_env.py
"""
Environment setup utility for the API Testing Platform.
Helps configure environment variables for services.
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any, Optional

def load_env_file(env_file: str = ".env") -> Dict[str, str]:
    """Load environment variables from a file."""
    env_vars = {}
    env_path = Path(env_file)
    
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    
    return env_vars

def save_env_file(env_vars: Dict[str, str], env_file: str = ".env"):
    """Save environment variables to a file."""
    with open(env_file, 'w') as f:
        f.write("# API Testing Platform Environment Variables\n")
        f.write("# Generated by setup utility\n\n")
        
        # Group variables by category
        categories = {
            "Application Settings": ["API_TESTING_APP_NAME", "API_TESTING_DEBUG", "API_TESTING_HOST", "API_TESTING_PORT"],
            "Security": ["API_TESTING_SECRET_KEY", "API_TESTING_ACCESS_TOKEN_EXPIRE_MINUTES"],
            "Storage": ["API_TESTING_DATA_DIR", "API_TESTING_CONFIG_DIR", "API_TESTING_LOG_DIR"],
            "Database": ["API_TESTING_DATABASE_URL"],
            "External Services": ["API_TESTING_WEBHOOK_BASE_URL", "API_TESTING_NGROK_ENABLED"],
            "Brevo Configuration": ["BREVO_DEFAULT_SENDER_EMAIL", "BREVO_DEFAULT_SENDER_NAME", "BREVO_API_KEY"],
            "Other Services": []
        }
        
        # Write categorized variables
        for category, var_names in categories.items():
            if any(var in env_vars for var in var_names):
                f.write(f"\n# {category}\n")
                for var_name in var_names:
                    if var_name in env_vars:
                        f.write(f"{var_name}={env_vars[var_name]}\n")
        
        # Write any remaining variables
        written_vars = set()
        for var_list in categories.values():
            written_vars.update(var_list)
            
        remaining_vars = {k: v for k, v in env_vars.items() if k not in written_vars}
        if remaining_vars:
            f.write("\n# Additional Variables\n")
            for key, value in remaining_vars.items():
                f.write(f"{key}={value}\n")

def interactive_setup():
    """Interactive setup for environment variables."""
    print("üîß API Testing Platform - Environment Setup")
    print("=" * 50)
    
    # Load existing environment file
    env_vars = load_env_file()
    
    print("\nConfiguring Brevo Service:")
    print("(Press Enter to keep current value)")
    
    # Brevo configuration
    current_email = env_vars.get('BREVO_DEFAULT_SENDER_EMAIL', 'noreply@yourdomain.com')
    sender_email = input(f"Default sender email [{current_email}]: ").strip()
    if sender_email:
        env_vars['BREVO_DEFAULT_SENDER_EMAIL'] = sender_email
    else:
        env_vars['BREVO_DEFAULT_SENDER_EMAIL'] = current_email
    
    current_name = env_vars.get('BREVO_DEFAULT_SENDER_NAME', 'API Testing Platform')
    sender_name = input(f"Default sender name [{current_name}]: ").strip()
    if sender_name:
        env_vars['BREVO_DEFAULT_SENDER_NAME'] = sender_name
    else:
        env_vars['BREVO_DEFAULT_SENDER_NAME'] = current_name
    
    current_api_key = env_vars.get('BREVO_API_KEY', '')
    if current_api_key:
        masked_key = current_api_key[:10] + "..." + current_api_key[-4:] if len(current_api_key) > 14 else "***"
        api_key = input(f"Brevo API key [{masked_key}]: ").strip()
    else:
        api_key = input("Brevo API key (optional, can be set later): ").strip()
    
    if api_key:
        env_vars['BREVO_API_KEY'] = api_key
    elif current_api_key:
        env_vars['BREVO_API_KEY'] = current_api_key
    
    # Set default application settings if not present
    defaults = {
        'API_TESTING_APP_NAME': 'API Testing Platform',
        'API_TESTING_DEBUG': 'true',
        'API_TESTING_HOST': '127.0.0.1',
        'API_TESTING_PORT': '8000',
        'API_TESTING_DATA_DIR': './data',
        'API_TESTING_CONFIG_DIR': './config',
        'API_TESTING_LOG_DIR': './data/logs',
        'API_TESTING_DATABASE_URL': 'sqlite:///./data/app.db',
        'API_TESTING_WEBHOOK_BASE_URL': 'http://localhost:8000',
        'API_TESTING_NGROK_ENABLED': 'false',
        'API_TESTING_LOG_LEVEL': 'INFO'
    }
    
    for key, default_value in defaults.items():
        if key not in env_vars:
            env_vars[key] = default_value
    
    # Generate secret key if not present
    if 'API_TESTING_SECRET_KEY' not in env_vars:
        import secrets
        env_vars['API_TESTING_SECRET_KEY'] = secrets.token_hex(32)
    
    # Save environment file
    save_env_file(env_vars)
    
    print("\n‚úÖ Environment configuration saved to .env")
    print("\nYou can now start the platform with:")
    print("  python scripts/dev_server.py")
    
    return env_vars

def validate_config():
    """Validate current environment configuration."""
    print("üîç Validating Environment Configuration")
    print("=" * 40)
    
    env_vars = load_env_file()
    issues = []
    
    # Check required variables
    required_vars = [
        'API_TESTING_SECRET_KEY',
        'BREVO_DEFAULT_SENDER_EMAIL'
    ]
    
    for var in required_vars:
        if var not in env_vars or not env_vars[var]:
            issues.append(f"Missing required variable: {var}")
    
    # Validate email format
    sender_email = env_vars.get('BREVO_DEFAULT_SENDER_EMAIL', '')
    if sender_email and '@' not in sender_email:
        issues.append(f"Invalid email format: {sender_email}")
    
    # Check API key format (Brevo keys start with 'xkeysib-')
    api_key = env_vars.get('BREVO_API_KEY', '')
    if api_key and not api_key.startswith('xkeysib-'):
        issues.append("Brevo API key should start with 'xkeysib-'")
    
    if issues:
        print("‚ùå Configuration Issues Found:")
        for issue in issues:
            print(f"  ‚Ä¢ {issue}")
        return False
    else:
        print("‚úÖ Configuration looks good!")
        print(f"  ‚Ä¢ Sender Email: {env_vars.get('BREVO_DEFAULT_SENDER_EMAIL')}")
        print(f"  ‚Ä¢ Sender Name: {env_vars.get('BREVO_DEFAULT_SENDER_NAME')}")
        print(f"  ‚Ä¢ API Key: {'Configured' if env_vars.get('BREVO_API_KEY') else 'Not configured'}")
        return True

def main():
    """Main function for environment setup."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Environment setup for API Testing Platform")
    parser.add_argument("--validate", action="store_true", help="Validate current configuration")
    parser.add_argument("--interactive", action="store_true", help="Interactive setup")
    
    args = parser.parse_args()
    
    if args.validate:
        validate_config()
    elif args.interactive:
        interactive_setup()
    else:
        # Default: run interactive setup
        interactive_setup()

if __name__ == "__main__":
    main()